//
//  Student.swift
//  ONTheMap!
//
//  Created by Stephen Martinez on 3/17/17.
//  Copyright Â© 2017 Stephen Martinez. All rights reserved.
//

import Foundation

class Student{
    //objectID: an auto-generated id/key generated by Parse which uniquely identifies a StudentLocation
    private(set) var objectId: String!
    //uniqueKey: an optional key (ACCT/User ID) used to uniquely identify a StudentLocation
    private(set) var uniqueKey: String?
    //firstName: the first name of the student which matches their Udacity profile first name
    private(set) var firstName: String!
    //lastName: the last name of the student which matches their Udacity profile last name
    private(set) var lastName: String!
    //mapString: the location string used for geocoding the student location
    private(set) var mapString: String!
    //mediaUrl: the URL provided by the student
    private(set) var mediaURL: String!
    //latitude: the latitude of the student location (ranges from -90 to 90)
    private(set) var latitude: Float!
    //longitude: the longitude of the student location (ranges from -180 to 180)
    private(set) var longitude: Float!
    //Property that checks if a Student is usable in our locations list.
    var isValid: Bool{
        if objectId != nil && !objectId.isBlank && firstName != nil && !firstName.isBlank &&
            lastName != nil && !lastName.isBlank && mapString != nil && !mapString.isBlank &&
            mediaURL != nil && !mediaURL.isBlank && latitude != nil && longitude != nil{
            if uniqueKey == nil{print("The optional property \"uniqueKey\" has not been set")}
            return true}
        else{return false}
    }
    //Property that checks if a user (Student) is postable onto the map.
    var isPostable: Bool{
        if firstName != nil && !firstName.isBlank && lastName != nil && !lastName.isBlank &&
            mapString != nil && !mapString.isBlank && mediaURL != nil && !mediaURL.isBlank &&
            latitude != nil && longitude != nil{
            guard let  uniqueKey = uniqueKey else{return false}
            guard (!uniqueKey.isBlank) else {return false}
            return true}else{return false}
    }
    //Provides an easy way to print student info to consol.
    var description: String{
        var lat: String? = nil
        var lon: String? = nil
        if let latitude = latitude{lat = "\(latitude)"}
        if let longitude = longitude{lon = "\(longitude)"}
        let descriptionList = [
            "Valid: This Student \((isValid ? "is" : "is NOT")) valid for use on the Map",
            "Postable: This Student \((isPostable ? "is":"is NOT")) able to be posted",
            "First Name: \((firstName ?? "firstName is not set!"))",
            "Last Name: \((lastName ?? "lastName is not set!"))",
            "Object ID: \((objectId ?? "objectID is not set!"))",
            "Unique Key: \((uniqueKey ?? "uniqueKey is not set!"))",
            "Map String: \((mapString ?? "mapString is not set!"))",
            "Media URL: \((mediaURL ?? "mediaURL is not set!"))",
            "Latitude: \((lat ?? "latitude is not set!"))",
            "Longitude: \((lon ?? "longitude is not set!"))"
        ]
        return descriptionList.joined(separator: "\n")
    }
    
    ///MARK: TO DO: Eventually you'll need to validate the mapString and mediaURL properties in the setPropBy Method!!!
    func setPropertyBy(_ key: String, with value: Any){
        guard (value as? String != nil) || (value as? Float != nil) || (value as? Int != nil) || (value as? Double != nil) else {
            print("Student property setter could not use invalid type of \(value)"); return}
        guard StudentCnst.check(property: key) else{
            print("The \(key) key is not a valid Student property"); return}
        switch key {
        case StudentCnst.objectId: objectId = value as? String
        case StudentCnst.uniqueKey: uniqueKey = value as? String
        case StudentCnst.firstName: firstName = value as? String
        case StudentCnst.lastName: lastName = value as? String
        case StudentCnst.mapString: mapString = value as? String
        case StudentCnst.mediaURL: mediaURL = value as? String
        case StudentCnst.latitude:
            let floatValue: Float
            switch value{
            case let someNum as Int: floatValue = Float(someNum)
            case let someNum as Double: floatValue = Float(someNum)
            case let someNum as String: guard let number = Float(someNum)
                    else{print("\(value) is not convertable to the proper Latitude Type");return}
                floatValue = number
            case let someNum as Float: floatValue = someNum
            default: print("\(value) is not convertable to the proper Latitude Type"); return
            }
            guard (floatValue >= -90 && floatValue <= 90)
                else{print("Latitude Must be within range -90 to 90");return}
            latitude = floatValue
        case StudentCnst.longitude:
            let floatValue: Float
            switch value{
            case let someNum as Int: floatValue = Float(someNum)
            case let someNum as Double: floatValue = Float(someNum)
            case let someNum as String: guard let number = Float(someNum)
                    else{print("\(value) is not convertable to the proper Longitude Type");return}
                floatValue = number
            case let someNum as Float: floatValue = someNum
            default: print("\(value) is not convertable to the proper Longitude Type"); return
            }
            guard (floatValue >= -180 && floatValue <= 180)
                else{print("Longitude Must be within range -180 to 180");return}
            longitude = floatValue
        default:
            break
        }
    }
    
}
