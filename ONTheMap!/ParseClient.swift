//
//  ParseClient.swift
//  ONTheMap!
//
//  Created by Stephen Martinez on 3/3/17.
//  Copyright Â© 2017 Stephen Martinez. All rights reserved.
//

import Foundation
import UIKit

class StudentLocation{
    //objectID: an auto-generated id/key generated by Parse which uniquely identifies a StudentLocation
    private(set) var objectId: String! = nil
    
    //uniqueKey: an extra (optional) key used to uniquely identify a StudentLocation; you should populate this value using your Udacity account id
    private(set) var uniqueKey: String! = nil
    
    //firstName: the first name of the student which matches their Udacity profile first name
    private(set) var firstName: String! = nil
    
    //lastName: the last name of the student which matches their Udacity profile last name
    private(set) var lastName: String! = nil
    
    //mapString: the location string used for geocoding the student location
    private(set) var mapString: String! = nil
    
    //mediaUrl: the URL provided by the student
    private(set) var mediaURL: String! = nil
    
    //latitude: the latitude of the student location (ranges from -90 to 90)
    private(set) var latitude: Float! = nil
    
    //longitude: the longitude of the student location (ranges from -180 to 180)
    private(set) var longitude: Float! = nil
    
    private enum propertyName: String{
        case objectId = "objectId"
        case uniqueKey = "uniqueKey"
        case firstName = "firstName"
        case lastName = "lastName"
        case mapString = "mapString"
        case  mediaURL = "mediaURL"
        case latitude = "latitude"
        case longitude = "longitude"
    }
    
    func setPropertyBy(key: String, with value: Any){
        //Has to have either a Float or String Passed to it, otherwise it's rejected.
        guard (value as? String != nil) || (value as? Float != nil) else {
            print("StudentLocation property setter could not use invalid type of \(value)")
            return
        }
        guard ParseCnst.studentLocKeys.contains(key) else{
            print("The \(key) key is not a valid StudentLocation property")
            return
        }
        ///MARK: TODO
        //Need to set guards for situations where a String Value is passed for the lat or lon prop!!!!!
        switch key {
        case propertyName.objectId.rawValue:
            objectId = value as? String
        case propertyName.uniqueKey.rawValue:
            uniqueKey = value as? String
        case propertyName.firstName.rawValue:
            firstName = value as? String
        case propertyName.lastName.rawValue:
            lastName = value as? String
        case propertyName.mapString.rawValue:
            mapString = value as? String
        case propertyName.mediaURL.rawValue:
            mediaURL = value as? String
        case propertyName.latitude.rawValue:
            latitude = value as? Float
        case propertyName.longitude.rawValue:
            longitude = value as? Float
        default:
            break
        }
    }
    
    
}


class ParseMethod{

class func getStudentLocation(){
    
    }
}

